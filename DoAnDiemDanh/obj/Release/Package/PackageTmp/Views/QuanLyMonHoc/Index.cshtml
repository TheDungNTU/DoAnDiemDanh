@model IEnumerable<DoAnDiemDanh.Models.MONHOC>

@{
    var GiangVien = (IEnumerable<DoAnDiemDanh.Models.GIANGVIEN>)ViewBag.MaGV;
    ViewBag.Title = "Index";
    Layout = "~/Views/Layout/_LayoutAdmin.cshtml";

    <style>
        .is-invalid {
            color: #E84C3D;
            margin-top: 5px;
        }
        .mul-select {
            width: 100%;
            padding-left: 7px;
            height: 23px;
        }
       
    </style>
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Url.Action("Index","DiemDanh")">Trang Chủ</a></li>
        <li class="breadcrumb-item " aria-current="page">Quản lý môn học</li>
    </ol>
</nav>

<div>
    @using (Ajax.BeginForm("Create", "QuanLyMonHoc", new AjaxOptions { HttpMethod = "POST", OnSuccess = "FnSuccess" }, new { @class = "formMH" }))
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal shadow p-3 mb-2 card">
            <div class="form-group">
                <label class="control-label col-md-4" for="TenMH">Tên Môn Học</label>
                <div class="col-md-12">
                    <input class="form-control text-box single-line" id="TenMH" name="TenMH" type="text" value="" required>
                    <span class="field-validation-valid text-danger" data-valmsg-for="TenMH" data-valmsg-replace="true"></span>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-4" for="SoTC">Số Tín Chỉ</label>
                <div class="col-md-12">
                    <input class="form-control text-box single-line" data-val="true" data-val-number="The field SoTC must be a number." id="SoTC" name="SoTC" type="number" value="1" required>
                    <span class="field-validation-valid text-danger" data-valmsg-for="SoTC" data-valmsg-replace="true"></span>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-4" for="SoTC">Số ngày vắng tối đa</label>
                <div class="col-md-12">
                    <input class="form-control text-box single-line" data-val="true" data-val-number="The field SoTC must be a number." id="SoNgayVang" name="SoNgayVang" type="number" value="1" required>
                    <span class="field-validation-valid text-danger" data-valmsg-for="SoNgayVang" data-valmsg-replace="true"></span>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Thêm mới" class="btn btn-success btn-icon-split p-2 border">
                </div>
            </div>
        </div>
    }
</div>
   

<div class="card shadow mb-4">
    <div>
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">DANH SÁCH TẤT CẢ MÔN HỌC</h6>
        </div>
    </div>
    <div class="card-body">
        <div class="filter">
            <input type="text" class="form-control form-control-sm" id="Filter_QLTenMH" name="Filter_QLTenMH" placeholder="Nhập tên môn học..." />
        </div>

        <div class="table-responsive">
            <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                <thead>
                    <tr>
                        <th>Mã Môn Học</th>
                        <th>Tên Môn Học</th>
                        <th>Số Tín Chỉ</th>
                        <th>Số ngày vắng tối đa</th>
                        <th>Số Nhóm Môn Học</th>
                        <th style="width: 97px;">Chức năng</th>
                    </tr>
                </thead>
                <tbody id="data_table">
                    @foreach (var item in Model)
                    {
                    <tr id="row_@item.MaMH">
                        <td>
                            @Html.DisplayFor(modelItem => item.MaMH)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.TenMH)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.SoTC)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.SoNgayVang)
                        </td>
                        <td>
                            <a href="@Url.Action("Index","QuanLyNhomMonHoc",new{MaMH = item.MaMH})" class="btn btn-primary btn-icon-split">
                                <span class="icon text-white-50">
                                    @item.NHOMMONHOCs.Count()
                                </span>
                                <span class="text">Nhóm Môn Học</span>
                            </a>
                        </td>
                        <td>
                            @Html.ActionLink("Chỉnh sửa", "Edit", new { id = item.MaMH }) |
                            <a class="delete" data-model-id="@item.MaMH" onclick="Delete(this)" style="cursor: pointer;">Xóa</a>
                        </td>
                    </tr>
                        }
                </tbody>
            </table>
        </div>
    </div>
</div>



<script>

    var dt;

    function loadDataTable() {

        function removeAccents(str) {
            return str.normalize('NFD')
                .replace(/[\u0300-\u036f]/g, '')
                .replace(/đ/g, 'd').replace(/Đ/g, 'D');
        }

        $.fn.dataTable.ext.search.push(
            function (settings, data, dataIndex) {

                var TenMH = removeAccents($('#Filter_QLTenMH').val()).toLowerCase();
                var Data_TenMH = removeAccents(data[0]).toLowerCase();

                if (Data_TenMH.includes(TenMH)) {
                    return true;
                }
                return false;
            }
        );

        dt = $("#dataTable").DataTable({
            "language": {
                "lengthMenu": "Số hàng mỗi trang _MENU_",
                "search": "Tìm kiếm:",
                "info": "Tổng số _TOTAL_ hàng",
                "infoEmpty": "",
                "infoFiltered": "",
                "paginate": {
                    "first": "Đầu",
                    "last": "Cuối",
                    "next": "Trang sau",
                    "previous": "Trang trước"
                },
                searchPlaceholder: "Nhập tên môn học...",
                zeroRecords: "Không tìm thấy kết quả",
            }
        });

        $('#Filter_QLTenMH').on('input', function (e) {
            dt.draw();
        });
    }

    function FnSuccess(data) {
        if (data != false) {
            $(".close").click();
            var node = dt.row.add([
                        data.MaMH,
                        data.TenMH,
                        data.SoTC,
                        data.SoNgayVang,
                        `<a href="/QuanLyNhomMonHoc?MaMH=${data.MaMH}" class="btn btn-primary btn-icon-split">
                                <span class="icon text-white-50">
                                   0
                                </span>
                                <span class="text">Nhóm Môn Học</span>
                            </a>`,
                `<a href="/QuanLyMonHoc/Edit/${data.MaMH}">Chỉnh sửa</a> |
                                             <a class="delete" data-model-id="${data.MaMH}" onclick="Delete(this)" style="cursor: pointer;">Xóa</a>`
            ]).draw(true).node();
            $(node).attr('id', `row_${data.MaMH}`);
            Swal.fire({
                icon: 'success',
                title: 'Thành Công',
                text: `Môn học ${data.TenMH} đã được thêm thành công`,
                timer: 2000,
                showConfirmButton: false

            })
        }

    }


    function Delete(obj) {
        var ele = $(obj);
        var MaMH = ele.data("model-id");
        var url = `/QuanLyMonHoc/Delete/${MaMH}`

        swal.fire({
            title: 'Bạn có chắc?',
            text: "Nếu xóa sẽ không thể khôi phục!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Có, Hãy xóa!',
            cancelButtonText: 'Không, Quay lại!',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                $.post(url, { id: MaMH })
                    .done(function (data) {
                        dt.rows(`#row_${data.id}`)
                            .remove()
                            .draw();
                        Swal.fire({
                            icon: 'success',
                            title: 'Thành Công',
                            text: `Môn Học ${data.TenMH} đã được xóa`,
                            timer: 2000,
                            showConfirmButton: false
                        })
                    })
                    .fail(function (data) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Không thành công',
                            text: `Môn học đã có sinh viên đăng ký, không thể xóa!`,
                            timer: 2000,
                            showConfirmButton: false
                        })
                    });
            }
            else if (result.dismiss === Swal.DismissReason.cancel) {

            }
        })


    };


    $("#MaGV").change(function () {
        var tengv = $("#MaGV option:selected").html();
        $("#TenGV").val(tengv);
    })

    $(document).ready(function () {

        loadDataTable();

        jQuery.validator.addMethod("NotAllowNumber", function (value, element) {
            return this.optional(element) || /^([^0-9]*)$/.test(value);
        }, "Không được phép có chữ số.");

        jQuery.validator.addMethod("NotAllowFirstSpace", function (value, element) {
            return this.optional(element) || /^\S{1}/.test(value);
        }, "Kí tự đầu tiên không được có khoảng trắng.");

        jQuery.validator.addMethod("NotAllowSpecial", function (value, element) {
            return this.optional(element) || /^([^*\u0040.!/'#$%^&(){}[:;<>,.?/~_+-=|]*)$/.test(value);
        }, "Không được phép có kí tự đặc biệt.");

        jQuery.validator.addMethod("greaterThan",
        function (value, element, params) {

                if (!/Invalid|NaN/.test(new Date(value))) {
                    return new Date(value) > new Date($(params).val());
                }

                return isNaN(value) && isNaN($(params).val())
                    || (Number(value) > Number($(params).val()));
            }, 'Ngày kết thúc phải lớn hơn ngày bắt đầu.');


        var form = $(".formMH").validate({
            onfocusout: function (element) {
                $(element).valid();
            },
            invalidHandler: function (form, validator) {
                Swal.fire({
                    icon: 'error',
                    title: 'Xuất hiện lỗi',
                    text: `Thêm Môn Học không thành công`,
                    timer: 2000,
                    showConfirmButton: false

                })
                validator.focusInvalid();

            },

            errorClass: "is-invalid",
            validClass: "is-valid",
            rules: {
                TenMH: {
                    required: true,
                    NotAllowFirstSpace: true,
                    NotAllowNumber: true,
                    NotAllowSpecial: true,

                },
                SoTC: {
                    required: true,
                    range: [1, 10]
                },
                SoNgayVang: {
                    required: true,
                    range: [0, 100]
                },
              
            },
            messages: {
                TenMH: {
                    required: "Tên môn học không được để trống.",
                },
                SoTC: {
                    required: "Số tín chỉ không được để trống",
                    range: "Số tín chỉ phải lớn hơn 1 và bé hơn 10"
                },
                SoNgayVang: {
                    required: "Số ngày vắng tối đa không được để trống",
                    range: "Số ngày vắng tối đa phải lớn hơn 1 và bé hơn 10"
                },
               
            }
        });

        $(".mul-select").select2({
            placeholder: "Chọn Thời Khóa Biểu",
            tags: true,
            tokenSperators: ['/', ',', ',', " "],
            width: 'resolve',
            heigth: 'resolve'
        });

        $(".close").click(function () {
            form.resetForm();
        })
    });

</script>