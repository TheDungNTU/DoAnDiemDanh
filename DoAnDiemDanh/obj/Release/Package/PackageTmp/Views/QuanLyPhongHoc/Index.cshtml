@model IEnumerable<DoAnDiemDanh.Models.PHONGHOC>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Layout/_LayoutAdmin.cshtml";
    var Camera = (IEnumerable<DoAnDiemDanh.Models.CAMERA>)ViewBag.Camera;
    <style>
        .is-invalid {
            color: #E84C3D;
            margin-top: 5px;
        }
    </style>

}
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Url.Action("Index","DiemDanh")">Trang chủ</a></li>
        <li class="breadcrumb-item " aria-current="page">Quản lý phòng học</li>
    </ol>
</nav>

@using (Ajax.BeginForm("Create", "QuanLyPhongHoc", new AjaxOptions { HttpMethod = "POST", OnSuccess = "FnSuccess" }, new { @class = "formPhongHoc" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal shadow p-3 mb-2 card">
        <div class="form-group">
            <label class="control-label col-md-2" for="TenPhongHoc" style="font-size: 17px; font-weight:bold">Tên phòng học</label>
            <div class="col-md-10">
                <input class="form-control text-box single-line" id="TenPhongHoc" name="TenPhongHoc" type="text" value="" placeholder="Nhập tên Phòng học" required>
                <span class="field-validation-valid text-danger" data-valmsg-for="TenLop" data-valmsg-replace="true"></span>
            </div>
        </div>
        <div class="form-group">
            <input class="form-control text-box single-line" id="TenCamera" name="TenCamera" type="text" value="" style="display: none;">
            <label class="control-label col-md-2" for="TenSV" style="font-size: 17px; font-weight:bold">Tên Camera</label>
            <span id="TenCamera"></span>
            <div class="col-md-10">
                <select class="form-control" id="MaCamera" name="MaCamera" required>
                    <option value="">Mời bạn chọn Camera</option>
                    @foreach (var item in Camera)
                    {
                        <option value="@item.MaCamera">@item.TenCamera</option>
                    }
                </select>
                <span class="field-validation-valid text-danger" data-valmsg-for="MaCamera" data-valmsg-replace="true"></span>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Thêm mới" class="btn btn-success btn-icon-split p-2 border">
            </div>
        </div>
    </div>
}


<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">DANH SÁCH TẤT CẢ PHÒNG HỌC</h6>
    </div>
    <div class="card-body">
        <div class="filter">
            <input type="text" class="form-control form-control-sm" id="Filter_QLTenPhong" name="Filter_QLTenLop" placeholder="Nhập tên phòng..." />

        </div>
        <div class="table-responsive">
            <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                <thead>
                    <tr>
                        <th style="width: 128px;">Mã phòng học</th>
                        <th>Tên phòng học</th>
                        <th>Tên Camera</th>
                        <th>Chức năng</th>
                    </tr>
                </thead>
                <tbody id="data_table">
                    @foreach (var item in Model)
                    {
                        <tr id="row_@item.MaPhongHoc">
                            <td>
                                @Html.DisplayFor(modelItem => item.MaPhongHoc)
                            <td>
                                @Html.DisplayFor(modelItem => item.TenPhongHoc)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.CAMERA.TenCamera)
                            </td>
                            <td>
                                @Html.ActionLink("Chỉnh sửa", "Edit", new { id = item.MaPhongHoc }) |
                                <a class="delete" data-model-id="@item.MaPhongHoc" onclick="Delete(this)" style="cursor: pointer;">Xóa</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>



    var dt;

    function loadDataTable() {

        function removeAccents(str) {
            return str.normalize('NFD')
                .replace(/[\u0300-\u036f]/g, '')
                .replace(/đ/g, 'd').replace(/Đ/g, 'D');
        }

        $.fn.dataTable.ext.search.push(
            function (settings, data, dataIndex) {

                var TenPhong = removeAccents($('#Filter_QLTenPhong').val()).toLowerCase();
                var Data_TenPhong = removeAccents(data[1]).toLowerCase();

                if (Data_TenPhong.includes(TenPhong)) {
                    return true;
                }
                return false;
            }
        );

        dt = $("#dataTable").DataTable({
            "language": {
                "lengthMenu": "Số hàng mỗi trang _MENU_",
                "search": "Tìm kiếm:",
                "info": "Tổng số _TOTAL_ hàng",
                "infoEmpty": "",
                "infoFiltered": "",
                "paginate": {
                    "first": "Đầu",
                    "last": "Cuối",
                    "next": "Trang sau",
                    "previous": "Trang trước"
                },
                searchPlaceholder: "Nhập tên phòng...",
                zeroRecords: "Không tìm thấy kết quả",
            }

        });
        $('#Filter_QLTenPhong').on('input', function (e) {
            dt.draw();
        });
    }

    function FnSuccess(data) {
        console.log(data)
        if (data != false) {
            var node = dt.row.add([
                data.MaPhongHoc,
                data.TenPhongHoc,
                data.TenCamera,

                `<a href='/QuanLyPhongHoc/Edit/${data.MaPhongHoc}'>Chỉnh sửa</a> |<a class="delete" data-model-id="${data.PhongHoc}" onclick="Delete(this)" style="cursor: pointer;">Xóa</a>`
            ]).draw().node();
            $(node).attr('id', `row_${data.MaPhongHoc}`);
            $('#TenPhongHoc').val('');
            $("#MaCamera").val("").change();
            Swal.fire({
                icon: 'success',
                title: 'Thành Công',
                text: `Phòng ${data.TenPhongHoc} đã được thêm thành công`,
                timer: 2000,
                showConfirmButton: false

            })
        }
        else {
            Swal.fire({
                icon: 'error',
                title: 'Có lỗi',
                text: `Phòng học đã tồn tại, vui lòng nhập một phòng khác`,
                timer: 2000,
                showConfirmButton: false

            })
        }

    }

    function Delete(obj) {
        var ele = $(obj);
        var MaPhong = ele.data("model-id");
        var url = `/QuanLyPhongHoc/Delete/${MaPhong}`

        swal.fire({
            title: 'Bạn có chắc?',
            text: "Nếu xóa sẽ không thể khôi phục!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Có, Hãy xóa!',
            cancelButtonText: 'Không, Quay lại!',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                $.post(url, { id: MaPhong })
                    .done(function (data) {
                        dt.rows(`#row_${data.id}`)
                            .remove()
                            .draw();
                        Swal.fire({
                            icon: 'success',
                            title: 'Thành Công',
                            text: `Phòng ${data.TenPhongHoc} đã được xóa`,
                            timer: 2000,
                            showConfirmButton: false

                        })
                    })
                    .fail(function (data) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Không thành công',
                            text: `Phòng học đã có môn học giảng dạy, không thể xóa!`,
                            timer: 2000,
                            showConfirmButton: false

                        })
                    });
            }
            else if (result.dismiss === Swal.DismissReason.cancel) {

            }
        })


    };

    $("#MaCamera").change(function () {
        var tencamera = $("#MaCamera option:selected").html();
        $("#TenCamera").val(tencamera);
    })

    $(document).ready(function () {
        loadDataTable();

        if ($(window).width() < 380) {

            dt.column(0).visible(false, false);
            dt.column(2).visible(false, false);

            dt.columns.adjust().draw(false)
        }

        jQuery.validator.addMethod("NotAllowFirstSpace", function (value, element) {
            return this.optional(element) || /^\S{1}/.test(value);
        }, "Kí tự đầu tiên không được có khoảng trắng.");


        $(".formPhongHoc").validate({
            onfocusout: function (element) {
                $(element).valid();
            },
            invalidHandler: function (form, validator) {

                Swal.fire({
                    icon: 'error',
                    title: 'Xuất hiện lỗi',
                    text: `Thêm Lớp Học không thành công`,
                    timer: 2000,
                    showConfirmButton: false

                })
                validator.focusInvalid();

            },
            errorClass: "is-invalid",
            validClass: "is-valid",
            rules: {
                TenPhongHoc: {
                    required: true,

                    NotAllowFirstSpace: true,
                    remote: {
                        url: "/QuanLyPhongHoc/CheckPhong/",
                        type: "post",
                    }
                },
                MaCamera: {
                    // "required",//

                    required: true,
                    remote: {
                        url: "/QuanLyPhongHoc/CheckCamera/",
                        type: "post",
                    }
                },
            },
            messages: {
                TenPhongHoc: {
                    required: "Tên phòng học không được để trống.",
                    remote: "Tên Phòng Đã Tồn Tại, Vui Lòng Nhập Phòng Khác"
                },
                MaCamera: {
                    required: "Vui Lòng Chọn Camera .",
                    remote: "Vui Lòng Chọn Camera Hợp Lệ (Chưa được dùng)"
                },
            }
        });



    });
</script>
