@model DoAnDiemDanh.Models.SINHVIEN

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Layout/_LayoutAdmin.cshtml";
    <style>
        .is-invalid {
            color: #E84C3D;
            margin-top: 5px;
        }
    </style>
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Url.Action("Index","DiemDanh")">Trang Chủ</a></li>
        <li class="breadcrumb-item"><a href="@Url.Action("Index","QuanLySinhVien")">Quản lý sinh viên</a></li>
        <li class="breadcrumb-item " aria-current="page">Chỉnh sửa</li>
    </ol>
</nav>

@using (Html.BeginForm("Edit", "QuanLySinhVien", FormMethod.Post, new { @class = "formSinhVien" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal shadow p-3 mb-2 card">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.MaSV)
        @Html.HiddenFor(model => model.Email)
        @Html.HiddenFor(model => model.DiaChi)
        @Html.HiddenFor(model => model.SDT)
        @Html.HiddenFor(model => model.Avatar)

        <div class="form-group">
            <label class="control-label col-md-2" style="font-size: 17px; font-weight:bold">Tên Sinh Viên</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.TenSV, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TenSV, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" style="font-size: 17px; font-weight:bold">Tên Khoa</label>
            <div class="col-md-10">
                @Html.DropDownList("MaKhoa", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MaKhoa, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" style="font-size: 17px; font-weight:bold">Tên Lớp</label>
            <div class="col-md-10">
                @Html.DropDownList("MaLop", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MaLop, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Lưu Lại" class="btn btn-success btn-icon-split p-2 border" />
            </div>
        </div>
        @*@{ DoAnDiemDanh.Models.BaseModel db = new DoAnDiemDanh.Models.BaseModel();
                var DS_Khoa = db.Entity.KHOAs;
                <div class="form-group">
                    <label class="control-label col-md-4" style="font-size: 17px; font-weight:bold">Tên Khoa</label>
                    <div class="col-md-12">
                        <select class="form-control" data-val="true" data-val-number="The field MaKhoa must be a number." id="MaKhoa" name="MaKhoa">
                            <option value="">Mời bạn chọn Khoa</option>
                            @foreach (var item in DS_Khoa)
                            {
                                <option value="@item.MaKhoa">@item.TenKhoa</option>
                            }
                        </select>
                        <span class="field-validation-valid text-danger" data-valmsg-for="MaKhoa" data-valmsg-replace="true"></span>
                    </div>
                </div>
            }*@
    </div>
}

<div>
    @Html.ActionLink("Quay lại danh sách", "Index")
</div>

<script>

    $("#MaKhoa").change(function () {
        $.get("/QuanLySinhVien/GetLopHoc", { id: $(this).val() }, function (data) {
            $("#MaLop").empty()
            $.each(data, function (index, row) {
                $("#MaLop").append("<option value='" + row.MaLop + "'>" + row.TenLop + "</option>")
            })
        })
    })

    $(document).ready(function () {


        jQuery.validator.addMethod("NotAllowNumber", function (value, element) {
            return this.optional(element) || /^([^0-9]*)$/.test(value);
        }, "Không được phép có chữ số.");

        jQuery.validator.addMethod("NotAllowFirstSpace", function (value, element) {
            return this.optional(element) || /^\S{1}/.test(value);
        }, "Kí tự đầu tiên không được có khoảng trắng.");

        jQuery.validator.addMethod("NotAllowSpecial", function (value, element) {
            return this.optional(element) || /^([^*\u0040.!/'#$%^&(){}[:;<>,.?/~_+-=|]*)$/.test(value);
        }, "Không được phép có kí tự đặc biệt.");


        var form = $(".formSinhVien").validate({
            onfocusout: function (element) {
                $(element).valid();
            },

            errorClass: "is-invalid",
            validClass: "is-valid",
            rules: {
                TenSV: {
                    required: true,
                    NotAllowNumber: true,
                    NotAllowSpecial: true,
                    NotAllowFirstSpace: true,
                },

                MaKhoa: {
                    required: true,
                },
                MaLop: {
                    required: true,
                }
            },
            messages: {
                TenSV: {
                    required: "Tên sinh viên không được để trống.",

                },

                MaKhoa: {
                    required: "Bạn chưa chọn Khoa, hãy chọn 1.",
                },

                MaLop: {
                    required: "Bạn chưa chọn Khoa, hãy chọn 1.",

                },
            }
        });
    });
</script>
